# -*- coding: utf-8 -*-
"""실습_1_LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QXQjO2nST0jcJ_0JOknSAcSXkmactjGX

이 문서는 [구글 코랩](https://colab.research.google.com/notebooks/welcome.ipynb)(Colaboratory) 노트북 파일입니다. 파이썬 프로그램을 브라우저에서 직접 실행할 수 있기 때문에 텐서플로를 배우고 사용하기 좋은 도구입니다:

1. 파이썬 런타임(runtime)에 연결하세요: 메뉴 막대의 오른쪽 상단에서 *연결*을 선택하세요.
2. 노트북의 모든 코드 셀(cell)을 실행하세요: *런타임* > *모두 실행*을 선택하세요.

# TensorFlow 이용하여 선형회귀모형 만들기
"""

import tensorflow as tf
import matplotlib.pyplot as plt

################################################################################
# 1. 데이터
"""
전체 데이터 2차원 리스트 -> x, y 각각 1차원 리스트로
for 문으로 나눔.
"""
data = [[10, 75],[14, 77],[17, 86],[20, 84],[22, 92],[25, 90]]

x_data = [lines[0] for lines in data]
y_data = [lines[1] for lines in data]
"""
그래프  보여주기
"""
plt.scatter(x_data, y_data)
plt.xlabel('study')
plt.ylabel('score')  
plt.show()

################################################################################
# 2. 모델

model = tf.keras.Sequential([
  tf.keras.layers.Dense(1, input_shape=[1]),
])

model.summary()
# (None, 1) shape -> 데이터 개수, 차원

"""### weight / bias 초기화"""

model.weights

"""### 학습 이전의 모델 추론 결과 확인하기"""

example_result = model.predict(x_data)
example_result

################################################################################
# 3. 학습

optimizer = tf.keras.optimizers.SGD(learning_rate=0.001, momentum=0.9)
model.compile(loss='mse', optimizer=optimizer, metrics='mse')
EPOCHS = 2000
history = model.fit(x_data, y_data, epochs=EPOCHS, verbose=0)

"""
accuracy 계속 찍히는거 보려면 
metrics 추가하고 verbose 빼야함.
model.compile(loss='mse', optimizer=optimizer, metrics=['accuracy'])
history = model.fit(x_data, y_data, epochs=EPOCHS)
"""

################################################################################
# 4. 평가

y_predict = model.predict(x_data)
y_predict



################################################################################
# 5. 그래프로 확인

def plot_history(history):
 
  plt.xlabel('Epoch')
  plt.ylabel('Mean Square Error')
  plt.plot(history.epoch, history.history['loss'], label='Train Error')  
  plt.legend()
  plt.show()

plot_history(history)

"""### 학습된 weight/bias 파라미터 확인"""

model.weights

"""### 학습된 선형회귀모델 확인"""

plt.scatter(x_data, y_data)
plt.xlabel('study')
plt.ylabel('score')  
plt.plot(x_data, y_predict, 'r--')
plt.show()

