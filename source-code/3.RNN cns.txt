model.fit 학습 전 데이터 준비 부분만 숙지하고 가면 될듯.
cns 실습 문제는 한국어 대상 라이브러리를 활용함.
데이터 준비를 어떻게 하는지 이해하는 용도로 작성함.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1. 데이터

(1) 파싱 (=자연어 형태소 분석)
"시간 가는 줄 알고 봤습니다."
"안보면 후회ㅠㅠ..."
['시간', '가는', '줄', '알', '고', '봤습니다', '.']
['안보', '면', '후회', 'ㅠㅠ', '...']

(2) 사전 (=단어를 정수로 매핑하는 사전 만들기)
vocab_dict
{'[PAD]': 0, '[OOV]': 1, 
'시간': 2, '가는': 3, '줄': 4, '알': 5, '고': 6, '봤습니다': 7, '.': 8, 
'안보': 9, '면': 10, '후회': 11, 'ㅠㅠ': 12, '...': 13}

(3) 정수화 (=자연어를 정수 인덱스로 변환)
먼저 딕셔너리에서 아래처럼 숫자만 뽑아내고
[[2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13]]
from tensorflow.keras.preprocessing.sequence import pad_sequences
사용해서 아래 numpy 행렬 데이터를 만듦
input_ids
[[ 0  0  0  2  3  4  5  6  7  8]
 [ 0  0  0  0  0  9 10 11 12 13]]

파이썬 리스트로 다 만든 다음에
train_label_ids = np.array(train_label_ids)
numpy 행렬로 바꿀수도 있음.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2. 모델

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, embedding_dim),
    tf.keras.layers.LSTM(lstm_hidden_dim),
    tf.keras.layers.Dense(dense_dim, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

Embedding -> vocab_dict 개수 맞춰줘야함


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
3. 학습

model.fit(train_input_ids, train_label_ids, epochs=num_epochs, validation_data=(val_input_ids, val_label_ids), verbose=2)
아래 형태의 input_ids, label_ids numpy 행렬 값을 넣어주면 학습 돌아감.
그 후 결과값 확인, ... 등은 모두 CNN 과 동일함.

*******train_input_ids
[[  2   3   4 ...   0   0   0]
 [ 19  20  21 ...   0   0   0]
 [ 29  30  31 ...  70  18  71]
 ...
 [691 692 693 ...   0   0   0]
 [702 110 703 ...   0   0   0]
 [707   8 272 ...   0   0   0]]
*******train_label_ids
[[1 0]
 [0 1]
 [0 1]
 [1 0]
 [0 1]
 [0 1]
 [1 0]
 [0 1]
 [0 1]
 [0 1]



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
4. 결과 시각화




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
5. 추론


최종 생성했던 데이터 numpy 행렬 값을 넣어주면 추론 결과값이 나옴.
scores = model.predict(input_ids)







